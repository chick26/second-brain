<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network/Internet on </title>
    <link>chick26.github.io/tags/Network/Internet/</link>
    <description>Recent content in Network/Internet on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="chick26.github.io/tags/Network/Internet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARPANET</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/ARPANET/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/ARPANET/</guid>
      <description>up:: [ • TOC for Frontend
Apranet 阿帕网  高级研究计划局网络（英语：Advanced Research Projects Agency Network），通称阿帕网（英语：ARPANET）是美国国防高级研究计划局开发的世界上第一个运营的数据包交换网络，是全球互联网的鼻祖。
 历史房展 ARPA网无法做到和个别计算机网络交流，这引发了研究者的思考。根据诺顿的看法，他的设计需要太多的控制和太多的网络中机器设备的标准化。因此，1973年春， 文顿·瑟夫和 鲍勃·康（Bob Kahn）开始思考如何将ARPA网和另外两个已有的网络相连接，尤其是连接卫星网络（SAT NET）和基于夏威夷的分组无线业务的ALOHA网（ALOHA NET）瑟夫设想了新的计算机交流协议，最后创造出 [[TCP.</description>
    </item>
    
    <item>
      <title>ARPANET</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/ARPANET/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/ARPANET/</guid>
      <description>up:: [ • TOC for Frontend
Apranet 阿帕网  高级研究计划局网络（英语：Advanced Research Projects Agency Network），通称阿帕网（英语：ARPANET）是美国国防高级研究计划局开发的世界上第一个运营的数据包交换网络，是全球互联网的鼻祖。
 历史房展 ARPA网无法做到和个别计算机网络交流，这引发了研究者的思考。根据诺顿的看法，他的设计需要太多的控制和太多的网络中机器设备的标准化。因此，1973年春， 文顿·瑟夫和 鲍勃·康（Bob Kahn）开始思考如何将ARPA网和另外两个已有的网络相连接，尤其是连接卫星网络（SAT NET）和基于夏威夷的分组无线业务的ALOHA网（ALOHA NET）瑟夫设想了新的计算机交流协议，最后创造出 [[TCP.</description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/DNS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/DNS/</guid>
      <description>up:: [ • TOC for Frontend
 域名系统 (DNS) 是互联网的电话簿。人们通过例如 nytimes.com 或 espn.com 等域名在线访问信息。Web 浏览器通过 [[IP|互联网协议]]（IP） 地址进行交互。DNS 将域名转换为 IP 地址，以便浏览器能够加载互联网资源。</description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/DNS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/DNS/</guid>
      <description>up:: [ • TOC for Frontend
 域名系统 (DNS) 是互联网的电话簿。人们通过例如 nytimes.com 或 espn.com 等域名在线访问信息。Web 浏览器通过 [[IP|互联网协议]]（IP） 地址进行交互。DNS 将域名转换为 IP 地址，以便浏览器能够加载互联网资源。</description>
    </item>
    
    <item>
      <title>Domain Name</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/Domain-Name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/Domain-Name/</guid>
      <description>up:: [ • TOC for Frontend
 域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了方便人类理解的地址。
  概述 任何连上互联网的电脑都可以通过一个公共 IP 地址访问到，对于IPv4地址来说，这个地址有32位（它们通常写成四个范围在 0~255 以内，由点分隔的数字组成，比如 173.194.121.32），而对于IPv6来说，这个地址有128位，通常写成八组由冒号分隔的四个十六进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337). 计算机可以很容易地处理这些IP地址, 但是对一个人来说很难找出谁在操控这些服务器以及这些网站提供什么服务。IP 地址很难记忆而且可能会随着时间的推移发生改变 。为了解决这些问题，我们使用方便记忆的地址，称作域名。</description>
    </item>
    
    <item>
      <title>Domain Name</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/Domain-Name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/Domain-Name/</guid>
      <description>up:: [ • TOC for Frontend
 域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了方便人类理解的地址。
  概述 任何连上互联网的电脑都可以通过一个公共 IP 地址访问到，对于IPv4地址来说，这个地址有32位（它们通常写成四个范围在 0~255 以内，由点分隔的数字组成，比如 173.194.121.32），而对于IPv6来说，这个地址有128位，通常写成八组由冒号分隔的四个十六进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337). 计算机可以很容易地处理这些IP地址, 但是对一个人来说很难找出谁在操控这些服务器以及这些网站提供什么服务。IP 地址很难记忆而且可能会随着时间的推移发生改变 。为了解决这些问题，我们使用方便记忆的地址，称作域名。</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/HTTP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/HTTP/</guid>
      <description>up:: [ • TOC for Frontend
 超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议, [[../../../..//Cards/📲%20Front%20Dev/Internet/HTTP.md]]是 [[WWW.md|万维网]] 的数据通信的基础。设计 [[../../../..//Cards/📲%20Front%20Dev/Internet/HTTP.md]] 最初的目的是为了提供一种发布和接收 [[../../../..//Cards/📲%20Front%20Dev/Internet/HTTP.md]] 页面的方法。通过 [[../../../..//Cards/📲%20Front%20Dev/Internet/HTTP.md]] 或者 [[../../../..//Cards/📲%20Front%20Dev/Internet/HTTP.md|HTTPS协议]] 请求的资源由 [[URL.</description>
    </item>
    
    <item>
      <title>INTERNET</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/INTERNET/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/INTERNET/</guid>
      <description>Internet 互联网  电脑网络与电脑网络之间所串连成的庞大网络系统。这些网络以一些标准的网络协议相连。它是由从地方到全球范围内几百万个私人、学术界、企业和政府的网络所构成，通过电子、无线和光纤网络技术等等一系列广泛的技术联系在一起。互联网承载范围广泛的信息资源和服务，比方说相互关系的超文本文件，还有万维网（[[WWW.md]]）的应用、电子邮件、通话，以及文件共享服务。
 什么是互联网 ? 互联网的起源可以追溯到1960年代美国联邦政府委托进行的一项研究，目的是创建容错与电脑网络的通信。互联网的前身 [[ARPANET.md]] 最初在1980年代作为区域学术和军事网络连接的骨干。1980年代，NSFNET 成为新的骨干而得到资助，以及其他商业化扩展得到了私人资助，这导致了全世界网络技术的快速发展，以及许多不同网络的合并结成更大的网络。到1990年代初，商业网络和企业之间的连接标志着向现代互联网的过渡。尽管互联网在1980年代只被学术界广泛使用，但商业化的服务和技术，令其极快的融入了现代每个人的生活。
词汇区别 互联网并不等同万维网([[WWW.md]])，互联网是指凡是能彼此通信的设备组成的网络就叫互联网，指利用TCP/IP通讯协定所创建的各种网络，是国际上最大的互联网，也称“国际互联网”。万维网是一个由许多互相链接的超文本组成的系统，通过互联网访问。在此定义下，万维网是互联网的一项服务。不过多数民众并不区分两者，常常混用。</description>
    </item>
    
    <item>
      <title>proxy</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/proxy/</guid>
      <description>up:: [ • TOC for Frontend
正向代理 正向代理（forward proxy）：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。
反向代理 反向代理（reverse proxy）：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。
正向代理和反向代理的区别 正向代理服务器和反向代理服务器所处的位置都是客户端和真实服务器之间，所做的事情也都是把客户端的请求转发给服务器，再把服务器的响应转发给客户端，但是二者之间还是有一定的差异的。
1、正向代理其实是客户端的代理，帮助客户端访问其无法访问的服务器资源。反向代理则是服务器的代理，帮助服务器做负载均衡，安全防护等。
2、正向代理一般是客户端架设的，比如在自己的机器上安装一个代理软件。而反向代理一般是服务器架设的，比如在自己的机器集群中部署一个反向代理服务器。
3、正向代理中，服务器不知道真正的客户端到底是谁，以为访问自己的就是真实的客户端。而在反向代理中，客户端不知道真正的服务器是谁，以为自己访问的就是真实的客户端。
4、正向代理和反向代理的作用和目的不同。正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用。二者均能提高访问速度。</description>
    </item>
    
    <item>
      <title>proxy</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/proxy/</guid>
      <description>up:: [ • TOC for Frontend
正向代理 正向代理（forward proxy）：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。
反向代理 反向代理（reverse proxy）：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。
正向代理和反向代理的区别 正向代理服务器和反向代理服务器所处的位置都是客户端和真实服务器之间，所做的事情也都是把客户端的请求转发给服务器，再把服务器的响应转发给客户端，但是二者之间还是有一定的差异的。
1、正向代理其实是客户端的代理，帮助客户端访问其无法访问的服务器资源。反向代理则是服务器的代理，帮助服务器做负载均衡，安全防护等。
2、正向代理一般是客户端架设的，比如在自己的机器上安装一个代理软件。而反向代理一般是服务器架设的，比如在自己的机器集群中部署一个反向代理服务器。
3、正向代理中，服务器不知道真正的客户端到底是谁，以为访问自己的就是真实的客户端。而在反向代理中，客户端不知道真正的服务器是谁，以为自己访问的就是真实的客户端。
4、正向代理和反向代理的作用和目的不同。正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用。二者均能提高访问速度。</description>
    </item>
    
    <item>
      <title>TCP</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/TCP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/TCP/</guid>
      <description>up:: [ • TOC for Frontend
1. 传输层协议 UDP  用户数据报协议 UDP（User Datagram Protocol）：
  UDP 在传送数据之前不需要先建立连接，远程主机在收到 UDP 报文后，不需要给出任何确认。 虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如：QQ 语音、 QQ 视频 、直播等等  TCP  传输控制协议 TCP（Transmission Control Protocol）：</description>
    </item>
    
    <item>
      <title>URL</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/URL/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/URL/</guid>
      <description>up:: [ • TOC for Frontend
 URL 代表着是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个唯一的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。而在实际中，也有一些例外，最常见的情况就是一个 URL 指向了不存在的或是被移动过的资源。由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的URL。</description>
    </item>
    
    <item>
      <title>URL</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/URL/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/URL/</guid>
      <description>up:: [ • TOC for Frontend
 URL 代表着是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个唯一的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。而在实际中，也有一些例外，最常见的情况就是一个 URL 指向了不存在的或是被移动过的资源。由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的URL。</description>
    </item>
    
    <item>
      <title>Web Browsers</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/Web-Browsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/Web-Browsers/</guid>
      <description>up:: [ • TOC for Frontend
1. 浏览器高层结构  用户界面 - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。 浏览器引擎 - 在用户界面和呈现引擎之间传送指令。 呈现引擎 - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。 网络 - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。 用户界面后端 - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。 JavaScript 解释器。用于解析和执行 JavaScript 代码。 数据存储。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库   2.</description>
    </item>
    
    <item>
      <title>Web Hosting</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/Web-Hosting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/Web-Hosting/</guid>
      <description>up:: [ • TOC for Frontend
 虚拟主机（英语：virtual hosting）或称 共享主机（shared web hosting），又称虚拟服务器，是一种在单一主机或主机群上，实现多网域服务的方法，可以执行多个网站或服务的技术。虚拟主机之间完全独立，并可由用户自行管理，虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器。
其技术是互联网服务器采用的节省服务器硬件成本的技术，虚拟主机技术主要应用于HTTP，FTP，EMAIL等多项服务，将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器，从而充分利用服务器硬件资源。如果划分是系统级别的，则称为虚拟服务器。
 使用虚拟服务器目的 方便管理 所有的虚拟主机都在同一部主机中，因此彼此可以共享相同的配置设置，借此节省管理的人力与成本。
提高性能 相同主机内的虚拟主机可以共享彼此的程序集（Process Pool），因此可以缩短对客户端的回应时间.</description>
    </item>
    
    <item>
      <title>WWW</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/WWW/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/WWW/</guid>
      <description>up:: [ • TOC for Frontend
 万维网（英语：World Wide Web）亦作WWW、Web、全球广域网，是一个透过互联网访问的，由许多互相链接的超文本组成的信息系统。英国科学家蒂姆·伯纳斯-李于1989年发明了万维网。1990年他在瑞士CERN的工作期间编写了第一个网页浏览器。网页浏览器于1991年1月向其他研究机构发行，并于同年8月向公众开放。
 工作原理  [[INTERNET.md|互联网]] 和 [[../../../..//Cards/📲%20Front%20Dev/Internet/WWW.md|万维网]] 这两个名词经常被混用。然而，这两个名词的意思并不相同。互联网是一个全球互相连接的电脑网络系统。相较之下，万维网是由超链接和统一资源标志符连接的文件和其他资源的全球集合。万维网资源通常使用 [[HTTP.md|HTTP]] 或 [[HTTP.md|HTTPS]]访问，是互联网通信协议的其中之一。</description>
    </item>
    
    <item>
      <title>WWW</title>
      <link>chick26.github.io/Cards/-Front-Dev/Internet/WWW/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/Internet/WWW/</guid>
      <description>up:: [ • TOC for Frontend
 万维网（英语：World Wide Web）亦作WWW、Web、全球广域网，是一个透过互联网访问的，由许多互相链接的超文本组成的信息系统。英国科学家蒂姆·伯纳斯-李于1989年发明了万维网。1990年他在瑞士CERN的工作期间编写了第一个网页浏览器。网页浏览器于1991年1月向其他研究机构发行，并于同年8月向公众开放。
 工作原理  [[INTERNET.md|互联网]] 和 [[../../../..//Cards/📲%20Front%20Dev/Internet/WWW.md|万维网]] 这两个名词经常被混用。然而，这两个名词的意思并不相同。互联网是一个全球互相连接的电脑网络系统。相较之下，万维网是由超链接和统一资源标志符连接的文件和其他资源的全球集合。万维网资源通常使用 [[HTTP.md|HTTP]] 或 [[HTTP.md|HTTPS]]访问，是互联网通信协议的其中之一。</description>
    </item>
    
  </channel>
</rss>
