<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development/ComputerBasic/DataStructure/Recursion on</title><link>chick26.github.io/tags/Development/ComputerBasic/DataStructure/Recursion/</link><description>Recent content in Development/ComputerBasic/DataStructure/Recursion on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="chick26.github.io/tags/Development/ComputerBasic/DataStructure/Recursion/index.xml" rel="self" type="application/rss+xml"/><item><title>Recursion</title><link>chick26.github.io/Sources/Courses/%EF%B8%8F-Algorithms/Recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Sources/Courses/%EF%B8%8F-Algorithms/Recursion/</guid><description>up:: [ • TOC for Algorithm Course
[! Question]+ 如何理解“递归”？
递归是一种非常高效、简洁的编码技巧，编写递归代码的关键是写出递推公式，找出终止条件，然后再翻译成递归代码; 递归代码虽然简洁高效，但是，递归代码有很多副作用。比如，堆栈溢出、重复计算、函数调用耗时多、空间复杂度高等; 很多数据结构和算法的编码实现都要用到递归，比如 DFS 深度优先搜索、前中后序二叉树遍历等. 递归需要满足的三个条件 满足三个条件的问题可以用递归来解决： 1.</description></item></channel></rss>