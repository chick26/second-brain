<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development/Frontend/JavaScript/uiLibrary on </title>
    <link>chick26.github.io/tags/Development/Frontend/JavaScript/uiLibrary/</link>
    <description>Recent content in Development/Frontend/JavaScript/uiLibrary on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="chick26.github.io/tags/Development/Frontend/JavaScript/uiLibrary/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dumi 组件库搭建</title>
      <link>chick26.github.io/Cards/-Front-Dev/UILibrary/dumi-%E7%BB%84%E4%BB%B6%E5%BA%93%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/UILibrary/dumi-%E7%BB%84%E4%BB%B6%E5%BA%93%E6%90%AD%E5%BB%BA/</guid>
      <description>up:: [ • TOC for Frontend
配置相关 father 打包  esm 和 cjs 支持 rollup 和 babel 两种打包方式，rollup 和 babel 两者的区别在于：</description>
    </item>
    
    <item>
      <title>前端组件库设计</title>
      <link>chick26.github.io/Cards/-Front-Dev/UILibrary/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%BA%93%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>chick26.github.io/Cards/-Front-Dev/UILibrary/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%BA%93%E8%AE%BE%E8%AE%A1/</guid>
      <description>up:: [ • TOC for Frontend
前端组件库的设计原则 细粒度的考量 设计模式: 单一职责原则，所谓的单一职责组件要建立在可复用的基础上，对于不可复用的单一职责组件我们仅仅作为独立组件的内部组件即可。
通用性考量 Antd 依赖了大量以rc-开头的底层组件, 这些组件由 react-component (同时也就是 Antd 团队) 维护, 其主要实现组件的底层逻辑, Antd 则是在此基础上添加 Ant Design 设计语言而实现的，以 Select 组件为例，基本将所有的 DOM 结构控制权全部暴露给了开发者,，其本身只负责底层逻辑和最基本的 DOM 结构.</description>
    </item>
    
  </channel>
</rss>
