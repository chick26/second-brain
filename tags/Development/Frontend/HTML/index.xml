<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development/Frontend/HTML on</title><link>chick26.github.io/tags/Development/Frontend/HTML/</link><description>Recent content in Development/Frontend/HTML on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="chick26.github.io/tags/Development/Frontend/HTML/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML/</guid><description>up:: [[• TOC for Frontend]]
Head 注意: [[HTML-HEAD|HEAD列表]]中 找到HTML文档&amp;lt;head&amp;gt;标签内所有可配置的属性。
Meta 标签 Doctype（文档类型） 以下Doctype标签声明文档为HTML5类型，需要写在HTML文件的顶部。
1 2 &amp;lt;!-- 声明文档为 HTML5 类型 --&amp;gt; &amp;lt;!</description></item><item><title>HTML-HEAD</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-HEAD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-HEAD/</guid><description>up:: [[• TOC for Frontend]]
🤯 HEAD HTML &amp;lt;head&amp;gt; 元素的简单指南
最小推荐 以下是构成任何 Web 页面（网站/应用程序）的基本要素：
1 2 3 4 5 6 7 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!</description></item><item><title>HTML-HEAD</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-HEAD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-HEAD/</guid><description>up:: [[• TOC for Frontend]]
🤯 HEAD HTML &amp;lt;head&amp;gt; 元素的简单指南
最小推荐 以下是构成任何 Web 页面（网站/应用程序）的基本要素：
1 2 3 4 5 6 7 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!</description></item><item><title>HTML-Principel</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Principel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Principel/</guid><description>up:: [[• TOC for Frontend]]
HTML 最佳实践 编写易于维护与扩展的 HTML 文档。
全局 以 DOCTYPE 为开头 激活标准模式需要 DOCTYPE。
Bad:
1 2 3 &amp;lt;html&amp;gt; .</description></item><item><title>HTML-Semantic</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Semantic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Semantic/</guid><description>up:: [[• TOC for Frontend]]
什么是语义元素？ 非语义元素的例子：&amp;lt;div&amp;gt;和&amp;lt;span&amp;gt;- 没有说明它的内容。 语义元素示例： &amp;lt;form&amp;gt;、&amp;lt;table&amp;gt;和&amp;lt;article&amp;gt;- 明确定义其内容。
HTML 中的语义元素 许多网站包含 HTML 代码，例如： 来指示导航、页眉和页脚。
在 HTML 中，有一些语义元素可用于定义网页的不同部分：</description></item><item><title>HTML-Semantic</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Semantic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Semantic/</guid><description>up:: [[• TOC for Frontend]]
什么是语义元素？ 非语义元素的例子：&amp;lt;div&amp;gt;和&amp;lt;span&amp;gt;- 没有说明它的内容。 语义元素示例： &amp;lt;form&amp;gt;、&amp;lt;table&amp;gt;和&amp;lt;article&amp;gt;- 明确定义其内容。
HTML 中的语义元素 许多网站包含 HTML 代码，例如： 来指示导航、页眉和页脚。
在 HTML 中，有一些语义元素可用于定义网页的不同部分：</description></item><item><title>HTML-Validation</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Validation/</guid><description>up:: [[• TOC for Frontend]]
不同类型的表单数据校验 在 Web 中，你可能会遇见各种不同的表单校验：
客户端校验 发生在浏览器端，表单数据被提交到服务器之前，这种方式相较于服务器端校验来说，用户体验更好，它能实时的反馈用户的输入校验结果，这种类型的校验可以进一步细分成下面这些方式：
JavaScript 校验，这是可以完全自定义的实现方式； HTML5 内置校验，这不需要 JavaScript ，而且性能更好，但是不能像JavaScript那样可自定义。 服务器端校验 发生在浏览器提交数据并被服务器端程序接收之后 —— 通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息，并且告诉浏览器端发生错误的具体位置和原因，服务器端校验不像客户端校验那样有好的用户体验，因为它直到整个表单都提交后才能返回错误信息。但是服务器端校验是你的应用对抗错误/恶意数据的最后防线，在这之后，数据将被持久化至数据库。当今 所有的服务端框架都提供了数据校验与清洁功能（让数据更安全）。</description></item><item><title>HTML-Validation</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Validation/</guid><description>up:: [[• TOC for Frontend]]
不同类型的表单数据校验 在 Web 中，你可能会遇见各种不同的表单校验：
客户端校验 发生在浏览器端，表单数据被提交到服务器之前，这种方式相较于服务器端校验来说，用户体验更好，它能实时的反馈用户的输入校验结果，这种类型的校验可以进一步细分成下面这些方式：
JavaScript 校验，这是可以完全自定义的实现方式； HTML5 内置校验，这不需要 JavaScript ，而且性能更好，但是不能像JavaScript那样可自定义。 服务器端校验 发生在浏览器提交数据并被服务器端程序接收之后 —— 通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息，并且告诉浏览器端发生错误的具体位置和原因，服务器端校验不像客户端校验那样有好的用户体验，因为它直到整个表单都提交后才能返回错误信息。但是服务器端校验是你的应用对抗错误/恶意数据的最后防线，在这之后，数据将被持久化至数据库。当今 所有的服务端框架都提供了数据校验与清洁功能（让数据更安全）。</description></item></channel></rss>