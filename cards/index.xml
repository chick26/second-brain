<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cards on</title><link>chick26.github.io/cards/</link><description>Recent content in Cards on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="chick26.github.io/cards/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>chick26.github.io/Cards/%EF%B8%8F-Python/-TOC-for-Python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Python/-TOC-for-Python/</guid><description>🌏 [[Cards MOC]] | Python TOC 1 2 3 4 5 6 7 table WITHOUT ID (&amp;#34;[[&amp;#34; + file.name + &amp;#34;]]&amp;#34;) as TITLE, string(map(file.</description></item><item><title/><link>chick26.github.io/Cards/-Markdown/-TOC-for-Markdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Markdown/-TOC-for-Markdown/</guid><description>🌏 [[Cards MOC]] | Markdown TOC 1 2 3 4 5 6 7 table WITHOUT ID (&amp;#34;[[&amp;#34; + file.name + &amp;#34;]]&amp;#34;) as TITLE, string(map(file.</description></item><item><title/><link>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/-TOC-for-Git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/-TOC-for-Git/</guid><description>🌏 [[Cards MOC]] | Git TOC 1 2 3 4 5 6 7 table WITHOUT ID (&amp;#34;[[&amp;#34; + file.name + &amp;#34;]]&amp;#34;) as TITLE, string(map(file.</description></item><item><title/><link>chick26.github.io/Cards/-Docker/-TOC-for-Docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Docker/-TOC-for-Docker/</guid><description>🌏 [[Cards MOC]] | Docker MOC 1 2 3 4 5 6 7 table WITHOUT ID (&amp;#34;[[&amp;#34; + file.name + &amp;#34;]]&amp;#34;) as TITLE, string(map(file.</description></item><item><title/><link>chick26.github.io/Cards/-Data-Structure/-TOC-for-Data-Structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Data-Structure/-TOC-for-Data-Structure/</guid><description>🌏 [[Cards MOC]] | Data Structure TOC 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 for (let group of dv.</description></item><item><title/><link>chick26.github.io/Cards/-Network/-TOC-for-Network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Network/-TOC-for-Network/</guid><description>🌏 [[Cards MOC]] | Network TOC 1 2 3 4 5 6 7 table WITHOUT ID (&amp;#34;[[&amp;#34; + file.name + &amp;#34;]]&amp;#34;) as TITLE, string(map(file.</description></item><item><title/><link>chick26.github.io/Cards/-Front-Dev/-TOC-for-Frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/-TOC-for-Frontend/</guid><description>🌏 [[Cards MOC]] | Frontend TOC 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 for (let group of dv.</description></item><item><title/><link>chick26.github.io/Cards/-GPT/-TOC-for-GPT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-GPT/-TOC-for-GPT/</guid><description>🌏 [[Cards MOC]] | GPT TOC 1 2 3 4 5 6 7 table WITHOUT ID (&amp;#34;[[&amp;#34; + file.name + &amp;#34;]]&amp;#34;) as TITLE, string(map(file.</description></item><item><title>Agent vs Probe</title><link>chick26.github.io/Cards/-Network/Agent-vs-Probe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Network/Agent-vs-Probe/</guid><description>up:: [[• TOC for Network]]
Introduction A rapid change in IT infrastructure combined with an increased number of roaming devices is creating a more challenging environment for service managers to effectively manage and secure.</description></item><item><title>AppleScript</title><link>chick26.github.io/Cards/-Front-Dev/AppleScript/AppleScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/AppleScript/AppleScript/</guid><description>up:: [[• TOC for Frontend]]
键位代码 代码说明
Telegram Checkin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 tell _application_ &amp;#34;Telegram&amp;#34; to activate delay 0.</description></item><item><title>ARPANET</title><link>chick26.github.io/Cards/-Front-Dev/Internet/ARPANET/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/ARPANET/</guid><description>up:: [[• TOC for Frontend]]
Apranet 阿帕网 高级研究计划局网络（英语：Advanced Research Projects Agency Network），通称阿帕网（英语：ARPANET）是美国国防高级研究计划局开发的世界上第一个运营的数据包交换网络，是全球互联网的鼻祖。
历史房展 ARPA网无法做到和个别计算机网络交流，这引发了研究者的思考。根据诺顿的看法，他的设计需要太多的控制和太多的网络中机器设备的标准化。因此，1973年春， 文顿·瑟夫和 鲍勃·康（Bob Kahn）开始思考如何将ARPA网和另外两个已有的网络相连接，尤其是连接卫星网络（SAT NET）和基于夏威夷的分组无线业务的ALOHA网（ALOHA NET）瑟夫设想了新的计算机交流协议，最后创造出 [[TCP|传送控制协议]]／[[IP|互联网协议]]</description></item><item><title>Card MOC</title><link>chick26.github.io/Cards/Cards-MOC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/Cards-MOC/</guid><description>🌏 [[Atlases MOC|Atlases]] | Cards MOC [[• TOC for Markdown|Markdown]] [[• TOC for Git|Git]] [[• TOC for Docker|Docker]] [[• TOC for Data Structure|Data Structure]] [[• TOC for Network|Network]] [[• TOC for Frontend|Frontend]] [[• TOC for GPT|AI]] [[• TOC for Python|Python]]</description></item><item><title>Comparing IP transit and DIA IPTP Networks</title><link>chick26.github.io/Cards/-Network/Comparing-IP-transit-and-DIA-IPTP-Networks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Network/Comparing-IP-transit-and-DIA-IPTP-Networks/</guid><description>With everything being digitalized and online, Internet connectivity is fundamental for all modern businesses. As you may know, the Internet is a network of all networks.</description></item><item><title>DNS</title><link>chick26.github.io/Cards/-Front-Dev/Internet/DNS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/DNS/</guid><description>up:: [[• TOC for Frontend]]
域名系统 (DNS) 是互联网的电话簿。人们通过例如 nytimes.com 或 espn.com 等域名在线访问信息。Web 浏览器通过 [[IP|互联网协议]]（IP） 地址进行交互。DNS 将域名转换为 IP 地址，以便浏览器能够加载互联网资源。
连接到 Internet 的每个设备都有一个唯一 IP 地址，其他计算机可使用该 IP 地址查找此设备。DNS 服务器使人们无需存储例如 192.</description></item><item><title>Docker Container Problem List</title><link>chick26.github.io/Cards/-Docker/Docker-Container-Problem-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Docker/Docker-Container-Problem-List/</guid><description>up:: [[• TOC for Docker]]
Sync timezone between system and container Enter container as root user 1 docker exec -it --user root &amp;lt;container name&amp;gt; bash Rename container timezone file avioding two-file issue 1 mv /etc/localtime /etc/localtime.</description></item><item><title>Document Handler</title><link>chick26.github.io/Cards/-Front-Dev/Tool/Document-Handler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Tool/Document-Handler/</guid><description>up:: [[• TOC for Frontend]]
1. PDF PDF.js Github: mozilla/pdf.js: PDF Reader in JavaScript Document: PDF.js PDF.js 是使用 HTML5 构建的可移植文档格式 (PDF) 查看器。它由社区驱动并受 Mozilla 支持，目标是创建一个通用的、基于 Web 标准的平台来解析和呈现 PDF。</description></item><item><title>Domain Name</title><link>chick26.github.io/Cards/-Front-Dev/Internet/Domain-Name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/Domain-Name/</guid><description>up:: [[• TOC for Frontend]]
域名（Domain names）是互联网基础架构的关键部分。它们为互联网上任何可用的网页服务器提供了方便人类理解的地址。
概述 任何连上互联网的电脑都可以通过一个公共 IP 地址访问到，对于IPv4地址来说，这个地址有32位（它们通常写成四个范围在 0~255 以内，由点分隔的数字组成，比如 173.194.121.32），而对于IPv6来说，这个地址有128位，通常写成八组由冒号分隔的四个十六进制数(e.g., 2027:0da8:8b73:0000:0000:8a2e:0370:1337). 计算机可以很容易地处理这些IP地址, 但是对一个人来说很难找出谁在操控这些服务器以及这些网站提供什么服务。IP 地址很难记忆而且可能会随着时间的推移发生改变 。为了解决这些问题，我们使用方便记忆的地址，称作域名。</description></item><item><title>dumi 组件库搭建</title><link>chick26.github.io/Cards/-Front-Dev/UILibrary/dumi-%E7%BB%84%E4%BB%B6%E5%BA%93%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/UILibrary/dumi-%E7%BB%84%E4%BB%B6%E5%BA%93%E6%90%AD%E5%BB%BA/</guid><description>up:: [[• TOC for Frontend]]
配置相关 father 打包 esm 和 cjs 支持 rollup 和 babel 两种打包方式，rollup 和 babel 两者的区别在于：</description></item><item><title>File Preview In Javascript</title><link>chick26.github.io/Cards/-Front-Dev/Tool/File-Preview-In-Javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Tool/File-Preview-In-Javascript/</guid><description>up:: [[• TOC for Frontend]]
实现方案 文档格式 老的开源组件 替代开源组件 word（docx） mammoth docx-preview(npm) powerpoint（pptx） pptxjs pptxjs改造开发 excel（xlsx） sheetjs、handsontable exceljs(npm)、handsontable(npm)(npm) pdf（pdf） pdfjs pdfjs(npm) 图片 jquery.</description></item><item><title>Git commit message</title><link>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/Git-commit-message/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/Git-commit-message/</guid><description>up:: [[• TOC for Git]]
A typical git commit message will look like
1 &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt; &amp;ldquo;type&amp;rdquo; must be one of the following mentioned below!</description></item><item><title>Git Craft</title><link>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/Git-Craft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/Git-Craft/</guid><description>up:: [[• TOC for Git]]
1、设置错误的远程库怎么办？
1 git remote -v$ git remote set-url origin {{url}} 2、Github Fork 的项目如何更新源项目更新？</description></item><item><title>Git hooks</title><link>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/Git-hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Git-Dev/Git-hooks/</guid><description>up:: [[• TOC for Git]]
常见 Git Hooks git hooks 大体上分为两类:
客户端 Hook pre-commit hook, 在运行 git commit 命令时且在 commit 完成前被触发 commit-msg hook, 在编辑完 commit-msg 时被触发，并且接受一个参数，这个参数是存放当前 commit-msg 的临时文件的路径 pre-push hook, 在运行 git push 命令时且在 push 命令完成前被触发 服务端 Hook pre-receive 在服务端接受到推送时且在推送过程完成前被触发 post-receive 在服务端接收到推送且推送完成后被触发 [!</description></item><item><title>HTML</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML/</guid><description>up:: [[• TOC for Frontend]]
Head 注意: [[HTML-HEAD|HEAD列表]]中 找到HTML文档&amp;lt;head&amp;gt;标签内所有可配置的属性。
Meta 标签 Doctype（文档类型） 以下Doctype标签声明文档为HTML5类型，需要写在HTML文件的顶部。
1 2 &amp;lt;!-- 声明文档为 HTML5 类型 --&amp;gt; &amp;lt;!</description></item><item><title>HTML-HEAD</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-HEAD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-HEAD/</guid><description>up:: [[• TOC for Frontend]]
🤯 HEAD HTML &amp;lt;head&amp;gt; 元素的简单指南
最小推荐 以下是构成任何 Web 页面（网站/应用程序）的基本要素：
1 2 3 4 5 6 7 &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!</description></item><item><title>HTML-Principel</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Principel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Principel/</guid><description>up:: [[• TOC for Frontend]]
HTML 最佳实践 编写易于维护与扩展的 HTML 文档。
全局 以 DOCTYPE 为开头 激活标准模式需要 DOCTYPE。
Bad:
1 2 3 &amp;lt;html&amp;gt; .</description></item><item><title>HTML-Semantic</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Semantic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Semantic/</guid><description>up:: [[• TOC for Frontend]]
什么是语义元素？ 非语义元素的例子：&amp;lt;div&amp;gt;和&amp;lt;span&amp;gt;- 没有说明它的内容。 语义元素示例： &amp;lt;form&amp;gt;、&amp;lt;table&amp;gt;和&amp;lt;article&amp;gt;- 明确定义其内容。
HTML 中的语义元素 许多网站包含 HTML 代码，例如： 来指示导航、页眉和页脚。
在 HTML 中，有一些语义元素可用于定义网页的不同部分：</description></item><item><title>HTML-Validation</title><link>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/HTML/HTML-Validation/</guid><description>up:: [[• TOC for Frontend]]
不同类型的表单数据校验 在 Web 中，你可能会遇见各种不同的表单校验：
客户端校验 发生在浏览器端，表单数据被提交到服务器之前，这种方式相较于服务器端校验来说，用户体验更好，它能实时的反馈用户的输入校验结果，这种类型的校验可以进一步细分成下面这些方式：
JavaScript 校验，这是可以完全自定义的实现方式； HTML5 内置校验，这不需要 JavaScript ，而且性能更好，但是不能像JavaScript那样可自定义。 服务器端校验 发生在浏览器提交数据并被服务器端程序接收之后 —— 通常服务器端校验都是发生在将数据写入数据库之前，如果数据没通过校验，则会直接从服务器端返回错误消息，并且告诉浏览器端发生错误的具体位置和原因，服务器端校验不像客户端校验那样有好的用户体验，因为它直到整个表单都提交后才能返回错误信息。但是服务器端校验是你的应用对抗错误/恶意数据的最后防线，在这之后，数据将被持久化至数据库。当今 所有的服务端框架都提供了数据校验与清洁功能（让数据更安全）。</description></item><item><title>HTTP</title><link>chick26.github.io/Cards/-Front-Dev/Internet/HTTP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/HTTP/</guid><description>up:: [[• TOC for Frontend]]
超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议, [[HTTP]]是 [[WWW|万维网]] 的数据通信的基础。设计 [[HTTP]] 最初的目的是为了提供一种发布和接收 [[HTTP]] 页面的方法。通过 [[HTTP]] 或者 [[HTTP|HTTPS协议]] 请求的资源由 [[URL|统一资源标识符]] 来标识。</description></item><item><title>INTERNET</title><link>chick26.github.io/Cards/-Front-Dev/Internet/INTERNET/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/INTERNET/</guid><description>Internet 互联网 电脑网络与电脑网络之间所串连成的庞大网络系统。这些网络以一些标准的网络协议相连。它是由从地方到全球范围内几百万个私人、学术界、企业和政府的网络所构成，通过电子、无线和光纤网络技术等等一系列广泛的技术联系在一起。互联网承载范围广泛的信息资源和服务，比方说相互关系的超文本文件，还有万维网（[[WWW]]）的应用、电子邮件、通话，以及文件共享服务。
什么是互联网 ? 互联网的起源可以追溯到1960年代美国联邦政府委托进行的一项研究，目的是创建容错与电脑网络的通信。互联网的前身 [[ARPANET]] 最初在1980年代作为区域学术和军事网络连接的骨干。1980年代，NSFNET 成为新的骨干而得到资助，以及其他商业化扩展得到了私人资助，这导致了全世界网络技术的快速发展，以及许多不同网络的合并结成更大的网络。到1990年代初，商业网络和企业之间的连接标志着向现代互联网的过渡。尽管互联网在1980年代只被学术界广泛使用，但商业化的服务和技术，令其极快的融入了现代每个人的生活。
词汇区别 互联网并不等同万维网([[WWW]])，互联网是指凡是能彼此通信的设备组成的网络就叫互联网，指利用TCP/IP通讯协定所创建的各种网络，是国际上最大的互联网，也称“国际互联网”。万维网是一个由许多互相链接的超文本组成的系统，通过互联网访问。在此定义下，万维网是互联网的一项服务。不过多数民众并不区分两者，常常混用。</description></item><item><title>Mermaid</title><link>chick26.github.io/Cards/-Markdown/Mermaid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Markdown/Mermaid/</guid><description>up:: [[• TOC for Markdown]]
Mermaid Markdown 概述 什么是 Mermaid？ Mermaid 是一种基于 Javascript 的绘图工具，使用类似于 Markdown 的语法，使用户可以方便快捷地通过代码创建图表。 项目地址： https://github.com/mermaid-js/mermaid（需要将梯子设置成全局模式才能访问） 在线渲染器： Online FlowChart &amp;amp; Diagrams Editor（需要梯子） 怎么使用 Mermaid？ 使用特定的 Mermaid 渲染器； 使用集成了 Mermaid 渲染功能的 Markdown 编辑器，如 Typora。**使用时，需要将代码块的语言选择为 Mermaid Mermaid 能绘制哪些图？ 饼状图：使用pie关键字，具体用法后文将详细介绍 流程图：使用graph关键字，具体用法后文将详细介绍 序列图：使用sequenceDiagram关键字 类图：使用classDiagram关键字 状态图：使用stateDiagram关键字 用户旅程图：使用journey关键字 实例 朱元璋家谱简图，圆圈代表皇帝。 1 2 3 4 5 6 7 8 graph LR emperor((朱八八))-.</description></item><item><title>PHPIPAM Docker Install</title><link>chick26.github.io/Cards/-Docker/PHPIPAM-Docker-Install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Docker/PHPIPAM-Docker-Install/</guid><description>up:: [[• TOC for Docker]]
Install Docker Engine and Docker-compose To install the latest version, run 1 2 3 4 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://download.</description></item><item><title>Playwright Off-line Development</title><link>chick26.github.io/Cards/%EF%B8%8F-Python/Playwright-Off-line-Development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Python/Playwright-Off-line-Development/</guid><description>up:: [[• TOC for Python]]
Off-line System Python Develop Environment Configuration Anaconda Off-line Package Installation Download the wheel package. Download binary files or .</description></item><item><title>pop</title><link>chick26.github.io/Cards/-Network/POP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Network/POP/</guid><description>up:: [[• TOC for Network]]
POP 是什么 PoP（Point-of-Presence）的意思是入口点。 PoP 点位于企业网络边缘之外，是访问企业网络内部的入口点。外界提供的服务通过 PoP 点进入。这些服务包括互联网接入、广域连接和电话服务 (PSTN)。
POP 特点 POP 点存在意味着运营商可以通过建立 POP 点将网络扩展到周边城市和国家。 POP 点越多，网络的综合服务能力越强，网络的可用性越高，网络服务对企业的保障就越多。类似地，在现代 Internet 上，POP 通常指的是 CDN 在某个位置物理存在的位置，通常位于称为 Internet 交换点的网络之间的交叉点</description></item><item><title>Promise 常用方法</title><link>chick26.github.io/Cards/-Front-Dev/JavaScript/Promise-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/JavaScript/Promise-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid><description>up:: [[• TOC for Frontend]]
Promise 中的三兄弟 .all(), .race(), .allSettled() 从 ES6 开始，我们大都使用的是 Promise.all()和Promise.race()，Promise.allSettled() 提案已经到第4阶段，因此将会成为ECMAScript 2020的一部分。
1. 概述 Promise.all&amp;lt;T&amp;gt;(promises: Iterable&amp;lt;Promise&amp;lt;T&amp;gt;&amp;gt;): Promise&amp;lt;Array&amp;lt;T&amp;gt;&amp;gt;</description></item><item><title>Prompt</title><link>chick26.github.io/Cards/-GPT/Prompt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-GPT/Prompt/</guid><description>up:: [[• TOC for GPT]]
如何编写清晰简洁的 Prompt [!Hint] Prompt
定义对话的目的和焦点 明确对话的目的和重点是什么，制作具有吸引力和信息性的提示 使用特定和相关的语言 使用特定、与主题相关的语言, 避免使用含糊不清的语言或行话 避免开放式或过于宽泛的提示 尽可能具体和明确地定义对话的目的和重点 保持对话正常进行 确保对话涵盖主题并提供有用的信息，避免引入不相关的话题 对话式不断深入 逐步提出更具体和深入的问题，以获得更准确和全面的回答 ICIO 模型 Instruction (必须) : 指令, 即我们模型执行的具体任务。 Context (选填) : 背景信息, 或者说是上下文信息, 这可以引导模型做出更好的反应。 Input Data (选填) : 输入数据, 告知模型需要处理的数据。 Output Indicator (选填) : 输出指示器, 告知模型我们要输出的类型或格式。 CRISPE 模型 CR: Capacity and Role (能力与角色) 。我们希望 ChatGPT 扮演怎样的角色。 I: Insight (洞察力) , 背景信息和上下文 (告知 ChatGPT 应该具备什么样的上下文) 。 S: Statement (指令) , 我们希望 ChatGPT 做什么。 P: Personality (个性) , 我们希望 ChatGPT 以什么风格或方式回答你。 E: Experiment (尝试) ，要求 ChatGPT 为我们提供多个答案 Step Example Capacity And Role Act as a n expert on software development on the topic Of machine Learning frameworks, and an expert blog writer.</description></item><item><title>proxy</title><link>chick26.github.io/Cards/-Front-Dev/Internet/proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/proxy/</guid><description>up:: [[• TOC for Frontend]]
正向代理 正向代理（forward proxy）：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。
反向代理 反向代理（reverse proxy）：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。
正向代理和反向代理的区别 正向代理服务器和反向代理服务器所处的位置都是客户端和真实服务器之间，所做的事情也都是把客户端的请求转发给服务器，再把服务器的响应转发给客户端，但是二者之间还是有一定的差异的。
1、正向代理其实是客户端的代理，帮助客户端访问其无法访问的服务器资源。反向代理则是服务器的代理，帮助服务器做负载均衡，安全防护等。
2、正向代理一般是客户端架设的，比如在自己的机器上安装一个代理软件。而反向代理一般是服务器架设的，比如在自己的机器集群中部署一个反向代理服务器。
3、正向代理中，服务器不知道真正的客户端到底是谁，以为访问自己的就是真实的客户端。而在反向代理中，客户端不知道真正的服务器是谁，以为自己访问的就是真实的客户端。
4、正向代理和反向代理的作用和目的不同。正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用。二者均能提高访问速度。</description></item><item><title>rollup.js</title><link>chick26.github.io/Cards/-Front-Dev/Package/rollup.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Package/rollup.js/</guid><description>up:: [[• TOC for Frontend]]
rollup.js 是一个 JavaScript 打包工具。本文介绍它的基本用法。
一、简介 打包工具的作用是，将多个 JavaScript 脚本合并成一个脚本，供浏览器使用。浏览器需要脚本打包，主要原因有三个。
（1）早期的浏览器不支持模块，大型网页项目只能先合并成单一脚本再执行。 （2）Node.js 的模块机制与浏览器不兼容，必须通过打包工具进行兼容处理。 （3）浏览器加载一个大脚本，要比加载多个小脚本，性能更好。
目前，最常用的打包工具是 Webpack。它的功能强大，但是难学难用，一直被人诟病。</description></item><item><title>Sketch 设计组件库</title><link>chick26.github.io/Cards/-Front-Dev/Tool/Sketch-%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Tool/Sketch-%E8%AE%BE%E8%AE%A1%E7%BB%84%E4%BB%B6%E5%BA%93/</guid><description>up:: [[• TOC for Frontend]]
1. Apple UI Design Resources 下载地址： Design Resources – Apple Developer
2. Google Material Design 下载地址： Sticker sheets &amp;amp; icons – Resources – Material Design</description></item><item><title>SNMP vs. SSH</title><link>chick26.github.io/Cards/-Network/SNMP-vs.-SSH/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Network/SNMP-vs.-SSH/</guid><description>up:: [[• TOC for Network]]</description></item><item><title>Superset Local Develop</title><link>chick26.github.io/Cards/%EF%B8%8F-Python/Superset-Local-Develop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Python/Superset-Local-Develop/</guid><description>up:: [[• TOC for Python]]
Local Development Prepare for develop environment 1 2 3 4 5 6 7 8 9 10 11 # Pull code from github git clone https://github.</description></item><item><title>Superset Off-line Installation</title><link>chick26.github.io/Cards/%EF%B8%8F-Python/Superset-Off-line-Installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/%EF%B8%8F-Python/Superset-Off-line-Installation/</guid><description>up:: [[• TOC for Python]]
Version Checking CentOS Version 1 2 cat /etc/redhat-release # CentOS Linux release 7.</description></item><item><title>TCP</title><link>chick26.github.io/Cards/-Front-Dev/Internet/TCP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/TCP/</guid><description>up:: [[• TOC for Frontend]]
1. 传输层协议 UDP 用户数据报协议 UDP（User Datagram Protocol）：
UDP 在传送数据之前不需要先建立连接，远程主机在收到 UDP 报文后，不需要给出任何确认。 虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如：QQ 语音、 QQ 视频 、直播等等 TCP 传输控制协议 TCP（Transmission Control Protocol）：</description></item><item><title>TypeScript 语法</title><link>chick26.github.io/Cards/-Front-Dev/TypeScript/TypeScript-%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/TypeScript/TypeScript-%E8%AF%AD%E6%B3%95/</guid><description>up:: [[• TOC for Frontend]]
1. 简介 Javascript的超集，特点：扩展语法、面向对象、静态类型。
全局安装typescript 1 yarn global add typescript 编译执行TS文件 1 2 tsc demo.</description></item><item><title>URL</title><link>chick26.github.io/Cards/-Front-Dev/Internet/URL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/URL/</guid><description>up:: [[• TOC for Frontend]]
URL 代表着是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个唯一的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。而在实际中，也有一些例外，最常见的情况就是一个 URL 指向了不存在的或是被移动过的资源。由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的URL。</description></item><item><title>Web Browsers</title><link>chick26.github.io/Cards/-Front-Dev/Internet/Web-Browsers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/Web-Browsers/</guid><description>up:: [[• TOC for Frontend]]
1. 浏览器高层结构 用户界面 - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。 浏览器引擎 - 在用户界面和呈现引擎之间传送指令。 呈现引擎 - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。 网络 - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。 用户界面后端 - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。 JavaScript 解释器。用于解析和执行 JavaScript 代码。 数据存储。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库 2.</description></item><item><title>Web Hosting</title><link>chick26.github.io/Cards/-Front-Dev/Internet/Web-Hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/Web-Hosting/</guid><description>up:: [[• TOC for Frontend]]
虚拟主机（英语：virtual hosting）或称 共享主机（shared web hosting），又称虚拟服务器，是一种在单一主机或主机群上，实现多网域服务的方法，可以执行多个网站或服务的技术。虚拟主机之间完全独立，并可由用户自行管理，虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器。
其技术是互联网服务器采用的节省服务器硬件成本的技术，虚拟主机技术主要应用于HTTP，FTP，EMAIL等多项服务，将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器，从而充分利用服务器硬件资源。如果划分是系统级别的，则称为虚拟服务器。
使用虚拟服务器目的 方便管理 所有的虚拟主机都在同一部主机中，因此彼此可以共享相同的配置设置，借此节省管理的人力与成本。
提高性能 相同主机内的虚拟主机可以共享彼此的程序集（Process Pool），因此可以缩短对客户端的回应时间.
降低成本 虚拟主机使得单一服务器的资源可以被更有效的利用，包括存储器、存储空间或处理器资源。因为通常服务单一网址所需的资源对整部服务器来说相当小，如此可让服务器的资源被更有效的利用。</description></item><item><title>WWW</title><link>chick26.github.io/Cards/-Front-Dev/Internet/WWW/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Internet/WWW/</guid><description>up:: [[• TOC for Frontend]]
万维网（英语：World Wide Web）亦作WWW、Web、全球广域网，是一个透过互联网访问的，由许多互相链接的超文本组成的信息系统。英国科学家蒂姆·伯纳斯-李于1989年发明了万维网。1990年他在瑞士CERN的工作期间编写了第一个网页浏览器。网页浏览器于1991年1月向其他研究机构发行，并于同年8月向公众开放。
工作原理 [[INTERNET|互联网]] 和 [[WWW|万维网]] 这两个名词经常被混用。然而，这两个名词的意思并不相同。互联网是一个全球互相连接的电脑网络系统。相较之下，万维网是由超链接和统一资源标志符连接的文件和其他资源的全球集合。万维网资源通常使用 [[HTTP|HTTP]] 或 [[HTTP|HTTPS]]访问，是互联网通信协议的其中之一。
若要进入万维网上一个网页，或者其他网络资源的时候，通常需浏览器上键入你想访问网页的统一资源 定位符（URL），或者通过超链接方式链接到那个网页或网络资源。 这之后的工作首先是URL的服务器名部分，被名为域名系统的分布于全球的因特网数据库解析，并根据解析结果决定进入哪一个 IP地址（IP Address）。 接下来的步骤是为所要访问的网页，向在那个IP地址工作的服务器发送一个 HTTP请求。在通常情况下，HTML文本、图片和构成该网页的一切其他文件很快会被逐一请求并发送回用户。 网络浏览器接下来的工作是把HTML、CSS和其他接受到的文件所描述的内容，加上图像、链接和其他必须的资源，显示给用户。这些就构成了你所看到的“网页”。 大多数的网页自身包含有超链接指向其他相关网页，可能还有下载、源文献、定义和其他网络资源。像这样通过超链接，把有用的相关资源组织在一起的集合，就形成了一个所谓的信息的“网”。这个网在因特网上被方便使用，就构成了最早在1990年代初蒂姆·伯纳斯-李所说的万维网 核心标准 万维网的核心部分是由三个标准构成的：</description></item><item><title>前端组件库设计</title><link>chick26.github.io/Cards/-Front-Dev/UILibrary/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%BA%93%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/UILibrary/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%BA%93%E8%AE%BE%E8%AE%A1/</guid><description>up:: [[• TOC for Frontend]]
前端组件库的设计原则 细粒度的考量 设计模式: 单一职责原则，所谓的单一职责组件要建立在可复用的基础上，对于不可复用的单一职责组件我们仅仅作为独立组件的内部组件即可。
通用性考量 Antd 依赖了大量以rc-开头的底层组件, 这些组件由 react-component (同时也就是 Antd 团队) 维护, 其主要实现组件的底层逻辑, Antd 则是在此基础上添加 Ant Design 设计语言而实现的，以 Select 组件为例，基本将所有的 DOM 结构控制权全部暴露给了开发者,，其本身只负责底层逻辑和最基本的 DOM 结构.</description></item><item><title>前端部署</title><link>chick26.github.io/Cards/-Front-Dev/Package/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/Package/%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2/</guid><description>up:: [[• TOC for Frontend]]
静态页面 先从简单的静态页面开始，众所周知，前端资源由 HTML、JavaScript、CSS 三剑客组成，假设我们有一个简单的页面，用 Nginx 作为 Web 服务器，资源组织结构大概如下：
HTML 1 2 3 4 &amp;lt;!---index.html---&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;foo.</description></item><item><title>数据库对比</title><link>chick26.github.io/Cards/-Data-Structure/Database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Data-Structure/Database/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94/</guid><description>up:: [[• TOC for Data Structure]]
数据库特性 关系型数据库比如 MySQL, 非关系数据库 (NoSql 数据库) 比如 Redis, MongoDB 等等
事务方面，关系型数据库的最大特点就是事务的一致性, 所以对于订单模型对一致性要求比较高的还是建议用 MySQL。 关系数据库的另一个特点就是其具有固定的表结构，其实在业务模型中, 表结构固定反而是一件好事, 没有约束的模型更容易出问题。 复杂 SQL，特别是多表关联查询，NoSql 是不支持 JOIN 这种查询的。 索引方式，关系型数据库：B 树、哈希等；NoSql：键值索引 并发支持，关系型数据库：通过事务和锁来支持并发，高并发情况下，执行效率较低；NoSql：打破了传统关系型数据库范式的约束和事务一致性，因此并发性能高。</description></item><item><title>浏览器解析 CSS 样式的过程</title><link>chick26.github.io/Cards/-Front-Dev/CSS/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90-CSS-%E6%A0%B7%E5%BC%8F%E7%9A%84%E8%BF%87%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Front-Dev/CSS/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90-CSS-%E6%A0%B7%E5%BC%8F%E7%9A%84%E8%BF%87%E7%A8%8B/</guid><description>up:: [[• TOC for Frontend]]
解析 一旦 CSS 被浏览器下载，CSS 解析器就会被打开来处理它遇到的任何 CSS。这可以是单个文档内的 CSS、&amp;lt;style&amp;gt;标记内的 CSS，也可以是 DOM 元素的style属性内嵌的 CSS。所 有 CSS 都根据语法规范进行解析和标记。解析完成后，就会生成有一个包含所有选择器、属性和属性各自值的数据结构。
例如，考虑以下 CSS:</description></item><item><title>网管接口</title><link>chick26.github.io/Cards/-Network/%E7%BD%91%E7%AE%A1%E6%8E%A5%E5%8F%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>chick26.github.io/Cards/-Network/%E7%BD%91%E7%AE%A1%E6%8E%A5%E5%8F%A3/</guid><description>up:: [[• TOC for Network]]
北向接口 北向接口（Northbound Interface）提供给其他厂家或运营商进行接入和管理的接口，即向上提供的接口。它是驻留在底层网管上的一个进程，与通常所说的 Agent 功能相同，负责处理来自上层网管的请求报文，发送 trap 信息。经常简写为“Intf. N”。
一般网管提供三种北向接口，分别为 CORBA（Common Object Request Broker Architecture）、SNMP、Syslog 北向接口。它们负责向上级网管系统提供基于 CORBA、SNMP 和 Syslog 协议的北向接口，支持上级网管系统通过对应的协议接入网管。</description></item></channel></rss>